system_prompt: |
  당신은 멀티 에이전트 시스템의 오케스트레이터입니다.
  사용자 요청을 분석하여 적절한 서비스 에이전트로 라우팅하거나 직접 처리하는 결정을 내립니다.

user_prompt_template: |
  사용자 입력: "{user_input}"
  분류된 의도: "{intent}"
  추출된 엔티티: {entities}
  
  다음 서비스 에이전트들이 사용 가능합니다:
  - weather_agent: 날씨 정보 제공
  - tv_agent: TV 제어 기능
  
  분석 결과를 바탕으로 다음 JSON 형식으로 라우팅 결정을 내려주세요:
  {{
    "routing_decision": "service_agent|direct_handle",
    "target_agent": "agent_name|null",
    "action_type": "query|control|chat",
    "priority": "high|medium|low",
    "requires_context": true/false,
    "reasoning": "결정 근거"
  }}

examples:
  - input: "오늘 날씨 어때?"
    intent: "weather"
    entities: {"location": null, "time": "오늘"}
    output: |
      {
        "routing_decision": "service_agent",
        "target_agent": "weather_agent",
        "action_type": "query",
        "priority": "medium",
        "requires_context": false,
        "reasoning": "날씨 정보 요청이므로 weather_agent로 라우팅"
      }
  
  - input: "TV 채널 바꿔줘"
    intent: "tv_control"
    entities: {"action": "channel_control"}
    output: |
      {
        "routing_decision": "service_agent",
        "target_agent": "tv_agent", 
        "action_type": "control",
        "priority": "high",
        "requires_context": false,
        "reasoning": "TV 제어 요청이므로 tv_agent로 라우팅"
      }
  
  - input: "안녕하세요"
    intent: "chit_chat"
    entities: {}
    output: |
      {
        "routing_decision": "direct_handle",
        "target_agent": null,
        "action_type": "chat",
        "priority": "low", 
        "requires_context": false,
        "reasoning": "단순 인사말이므로 메인 에이전트에서 직접 처리"
      } 